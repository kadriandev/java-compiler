/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
import java.util.ArrayList;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

   ArrayList<String> vars = new ArrayList<String>();
   ArrayList<String> funcs = new ArrayList<String>();
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, WHILE, INT, RETURN, VOID;
terminal ASSIGN, EQ, NEQ, LT, LTE, GT, GTE, PLUS, MINUS, TIMES, OVER, SEMI;
terminal COMMA, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal String ID, NUM, INPUT, OUTPUT;
terminal ERROR;
   
non terminal ExpList program, stmt_seq, if_body, else_body, while_body, param_decl, params;
non terminal Exp stmt, if_stmt, assign_stmt, while_stmt, return_stmt, func_decl, func_call;
non terminal Exp exp, simple_exp, term, factor, var_decl;


/* ----------------------------Grammar Section-------------------- */
   
start with program;

program	   ::= stmt_seq:s
               {: RESULT = s; :}
            ;

stmt        ::= return_stmt:w SEMI
                  {: RESULT = w; :}
               | var_decl:v SEMI
                  {: RESULT = v; :}
               | assign_stmt:a SEMI
                  {: RESULT = a; :}
               | func_call:f SEMI
                  {: RESULT = f; :}
               | if_stmt:i
                  {: RESULT = i; :}
               | while_stmt:r
                  {: RESULT = r; :}
               | func_decl:f
                  {: RESULT = f; :}
            ;

stmt_seq    ::= stmt_seq:s1 stmt:s2 
                  {: ExpList t = s1;
                     while( t.tail != null )
                        t = t.tail;
                     t.tail = new ExpList(s2, null);
                     RESULT = s1;
                  :}
               | stmt:s
                 {: RESULT = new ExpList(s, null); :}
               | error SEMI stmt:s
                 {: parser.report_error("invalid", null); 
                    RESULT = new ExpList(s, null); 
                 :}
            ;

var_decl    ::= INT:i ID:id
               {: 
                  vars.add(id);
                  RESULT = new VarExp(ileft, iright, "int", id); 
               :}
            ;

param_decl  ::= INT:i ID:id
                  {: 
                     VarExp[] args = new VarExp[1];
                     RESULT = new ExpList(new VarExp(ileft, iright, "int", id), null);
                  :}
               | param_decl:p COMMA INT:i ID:id
                  {: 
                     ExpList params = p;
                     while( params.tail != null )
                        params = params.tail;
                     params.tail = new ExpList(new VarExp(pleft, pright, "int", id), null);
                     RESULT = p;
                  :}
            ;

params      ::= simple_exp:e
                  {:
                     ExpList params = new ExpList(e, null);
                     RESULT = params; 
                  :}
               | params:p COMMA ID:id
                  {:
                     ExpList params = p;
                     while(params.tail != null)
                        params = params.tail;

                     params.tail = new ExpList(new VarExp(pleft, pright, "int", id), null);
                     RESULT = p; 
                  :}
               | params:p COMMA simple_exp:e
                  {:
                     ExpList params = p;
                     while(params.tail != null)
                        params = params.tail;

                     params.tail = new ExpList(e, null);
                     RESULT = p; 
                  :}
               | params:p COMMA func_call:f
                  {:
                     ExpList params = p;
                     while(params.tail != null)
                        params = params.tail;

                     params.tail = new ExpList(f, null);
                     RESULT = p; 
                  :}
            ;

if_stmt     ::= IF:i LPAREN exp:e RPAREN if_body:s
                  {: RESULT = new IfExp(ileft, iright, e, s, null); :}
               | IF:i LPAREN exp:e RPAREN if_body:s1 else_body:s2
                  {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
            ;

if_body     ::= LBRACE stmt_seq:s RBRACE
                  {: RESULT = s; :}
               | stmt:s
                  {: RESULT = new ExpList(s, null); :}
            ;

else_body   ::= ELSE LBRACE stmt_seq:s RBRACE
                  {: RESULT = s; :}
               | ELSE stmt:s
                  {: RESULT = new ExpList(s, null); :}
            ;

while_stmt  ::= WHILE:w LPAREN exp:e RPAREN while_body:s
               {: RESULT = new WhileExp(wleft, wright, s, e); :}
            ;

while_body  ::= LBRACE stmt_seq:s RBRACE
                  {: RESULT = s; :}
               | stmt:s
                  {: RESULT = new ExpList(s, null); :}
            ;

assign_stmt ::= INT ID:i ASSIGN exp:e
                 {: RESULT = new AssignExp(ileft, iright, new VarExp(ileft, iright, "int", i), e); :}
               | ID:i ASSIGN exp:e
                  {: 
                     if(vars.contains(i)) {
                        RESULT = new AssignExp(ileft, iright, new VarExp(ileft, iright, "int", i), e);
                     } 
                  :}
            ;

return_stmt ::= RETURN:r exp:e
                  {: RESULT = new ReturnExp(rleft, rright, e); :}
               | RETURN:r func_call:f
                  {: RESULT = new ReturnExp(rleft, rright, f); :}
            ;

func_decl   ::= VOID:v ID:id LPAREN VOID RPAREN LBRACE stmt_seq:s RBRACE
                  {: 
                     RESULT = new FunctionExp(vleft, vright, "void", id, null, s); 
                  :}
               | INT:i ID:id LPAREN param_decl:p RPAREN LBRACE stmt_seq:s RBRACE
                  {: 
                     RESULT = new FunctionExp(ileft, iright, "int", id, p, s); 
                  :}
            ;

func_call   ::= OUTPUT:o LPAREN ID:i RPAREN
               {: 
                  ExpList params = new ExpList(new VarExp(ileft, iright, "int", i), null);
                  RESULT = new FunctionCall(oleft, oright, "output", params); 
               :}
            | OUTPUT:o LPAREN NUM:n RPAREN
               {: 
                  ExpList params = new ExpList(new IntExp(nleft, nright, n), null);
                  RESULT = new FunctionCall(oleft, oright, "output", params); 
               :}
            | OUTPUT:o LPAREN func_call:f RPAREN
               {: 
                  ExpList params = new ExpList(f, null);
                  RESULT = new FunctionCall(oleft, oright, "output", params); 
               :}
            | INPUT:i LPAREN RPAREN
               {: RESULT = new FunctionCall(ileft, iright, "input", null); :}
            | ID:i LPAREN params:p RPAREN
               {: 
                  RESULT = new FunctionCall(ileft, iright, i, p);
               :}
            ;

exp         ::= simple_exp:s1 LT simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LT, s2); :}
               | simple_exp:s1 LTE simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.LTE, s2); :}
               | simple_exp:s1 GT simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GT, s2); :}
               | simple_exp:s1 GTE simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.GTE, s2); :}
               | simple_exp:s1 EQ simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.EQ, s2); :}
               | simple_exp:s1 NEQ simple_exp:s2
                 {: RESULT = new OpExp(s1left, s1right, s1, OpExp.NEQ, s2); :}
               | func_call:f
                 {: RESULT = f; :}
               | simple_exp:s
                 {: RESULT = s; :}
               
            ;

simple_exp  ::= simple_exp:s PLUS term:t
                 {: RESULT = new OpExp(sleft, sright, s, OpExp.PLUS, t); :}
               | simple_exp:s MINUS term:t
                 {: RESULT = new OpExp(sleft, sright, s, OpExp.MINUS, t); :}
               | term:t
                 {: RESULT = t; :}
            ;

term        ::= term:t TIMES factor:f
                 {: RESULT = new OpExp(tleft, tright, t, OpExp.TIMES, f); :}
               | term:t OVER factor:f
                 {: RESULT = new OpExp(tleft, tright, t, OpExp.OVER, f); :}
               | factor:f
                 {: RESULT = f; :}
            ;

factor      ::= LPAREN exp:e RPAREN
                 {: RESULT = e; :}
               | NUM:n
                 {: RESULT = new IntExp(nleft, nright, n); :}
               | ID:i
                 {: RESULT = new VarExp(ileft, iright, "int", i); :}
            ;